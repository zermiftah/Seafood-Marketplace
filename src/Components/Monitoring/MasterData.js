
import React, { Fragment, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Dialog, Transition } from '@headlessui/react'
import {
  FolderIcon,
  ServerIcon,
  SignalIcon,
  XMarkIcon,
} from '@heroicons/react/24/outline'
import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/20/solid';
import { Bars3Icon, MagnifyingGlassIcon } from '@heroicons/react/20/solid'

const navigation = [
  { name: 'item', href: '/ADMIN', icon: FolderIcon, current: false },
  { name: 'Master Data FI', href: '/MasterData', icon: ServerIcon, current: false },
  { name: 'Daily Issue', href: '/DailyIssue', icon: SignalIcon, current: false },
];

function classNames(...classes) {
  return classes.filter(Boolean).join(' ')
}

export default function MasterData() {
  const [masterDataFI, setMasterDataFI] = useState([]);
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const navigate = useNavigate();
  const [items, setitems] = useState([]);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedData, setSelectedData] = useState(null);
  const [notification, setNotification] = useState("");
  const [notificationInput, setNotificationInput] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);

  const [isModalOpenInput, setIsModalOpenInput] = useState(false);
  const [formData, setFormData] = useState({
    ID_FI: "",
    NAMA_FI: "",
    ID_FF: "",
    NAMA_FF: "",
    LINE: "",
    MODEL: "",
  });

  // Fungsi untuk membuka dan menutup modal
  const openModalInput = () => setIsModalOpenInput(true);
  const closeModalInput = () => setIsModalOpenInput(false);

  // Fungsi untuk menangani perubahan input pada form
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  // Fungsi untuk submit form dan memanggil API
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // Submit form data
      const response = await axios.post("http://172.16.206.4:2001/insertMasterDataFI", formData);

      console.log("Response data:", response.data); // Log the response to check what it returns

      // If the API response doesn't include the new data, use formData to manually create the new row
      const insertedData = response.data || {
        ...formData,
        IDMASTER: response.data?.IDMASTER || Date.now() // assuming IDMASTER is generated by the backend or manually for now
      };

      // Update local state masterDataFI with the newly added data
      setMasterDataFI((prevData) => [...prevData, insertedData]);

      // Set notification if successful
      setNotificationInput("Input Successfully!");

      // Reset form after submission
      setFormData({
        ID_FI: "",
        NAMA_FI: "",
        ID_FF: "",
        NAMA_FF: "",
        LINE: "",
        MODEL: "",
      });

      // Close modal after successful submission
      setTimeout(() => {
        closeModalInput();
      }, 2000);

    } catch (error) {
      console.error("Error submitting data:", error);
    }
  };

  const fetchData = async () => {
    try {
      const response = await axios.get('http://172.16.206.4:2001/masterdatafi');
      setMasterDataFI(response.data);
    } catch (err) {
      setError(err);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleLogout = async () => {
    const token = localStorage.getItem('token');
    navigate('/');

    const data = {
      ID_FI: null,
      LAST_LOGIN: null,
      TOKEN: token,
      ROLE: null,
      STATUS: 'NOT ACTIVED',
      PC_NAME: null,
      IP_ADDRESS: null,
    };

    console.log('Sending data:', data);

    try {
      const response = await axios.put('http://172.16.206.4:2001/updateFI_item', data);

      if (response.status === 200) {
        console.log('LAST_LOGIN updated successfully');
        localStorage.removeItem('token');
      } else {
        console.error('Failed to update LAST_LOGIN');
      }
    } catch (error) {
      console.error('An error occurred:', error);
    }
  };

  const openModal = (data) => {
    setSelectedData(data);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedData(null);
  };
  const showNotification = (type, message) => {
    setNotification({ type, message });
    setTimeout(() => {
      setNotification(null);
    }, 2000);
  };
  const handleUpdate = async () => {
    try {
      const { IDMASTER, ID_FF, NAMA_FF, LINE, MODEL, ID_FI, NAMA_FI } = selectedData;
      await axios.put("http://172.16.206.4:2001/updateMasterdatafi", {
        IDMASTER,
        ID_FI,
        NAMA_FI,
        NAMA_FF,
        LINE,
        MODEL,
        ID_FF
      });

      fetchData();
      closeModal();
      showNotification('success', 'Successfully Updated');
    } catch (error) {
      showNotification('error', 'Failed to update');
    }
  };

  const handleConfirmDelete = () => {
    if (selectedItem) {
      handleDelete(selectedItem.IDMASTER); // Use selectedItem instead of item
      setShowModal(false); // Close modal after delete
      setSelectedItem(null); // Clear the selected item
    }
  };

  const openModal2 = (item) => {
    setSelectedItem(item); // Store the item to be deleted
    setShowModal(true); // Open modal
  };

  const handleDelete = async (idmaster) => {
    try {
      await axios.delete(`http://172.16.206.4:2001/deletemasterdatafi/${idmaster}`);
      fetchData();
      showNotification('success', 'Successfully Deleted');
    } catch (error) {
      showNotification('error', 'Failed to delete');
    }
  };

  return (
    <>
      <div>
        <Transition.Root show={sidebarOpen} as={Fragment}>
          <Dialog as="div" className="relative z-50 xl:hidden" onClose={setSidebarOpen}>
            <Transition.Child
              as={Fragment}
              enter="transition-opacity ease-linear duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="transition-opacity ease-linear duration-300"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <div className="fixed inset-0 bg-gray-900" />
            </Transition.Child>

            <div className="fixed inset-0 flex">
              <Transition.Child
                as={Fragment}
                enter="transition ease-in-out duration-300 transform"
                enterFrom="-translate-x-full"
                enterTo="translate-x-0"
                leave="transition ease-in-out duration-300 transform"
                leaveFrom="translate-x-0"
                leaveTo="-translate-x-full"
              >
                <Dialog.Panel className="relative mr-16 flex w-full max-w-xs flex-1">
                  <Transition.Child
                    as={Fragment}
                    enter="ease-in-out duration-300"
                    enterFrom="opacity-0"
                    enterTo="opacity-100"
                    leave="ease-in-out duration-300"
                    leaveFrom="opacity-100"
                    leaveTo="opacity-0"
                  >
                    <div className="absolute left-full top-0 flex w-16 justify-center pt-5">
                      <button type="button" className="-m-2.5 p-2.5" onClick={() => setSidebarOpen(false)}>
                        <span className="sr-only">Close sidebar</span>
                        <XMarkIcon className="h-6 w-6 text-white" aria-hidden="true" />
                      </button>
                    </div>
                  </Transition.Child>
                  {/* Sidebar component, swap this element with another sidebar if you like */}
                  <div className="flex grow flex-col gap-y-5 overflow-y-auto bg-gray-900 px-6 ring-1 ring-white/10">
                    <div className="flex h-16 shrink-0 items-center">
                      <img
                        className="h-8 w-auto"
                        src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=500"
                        alt="Your Company"
                      />
                    </div>
                    <nav className="flex flex-1 flex-col">
                      <ul role="list" className="flex flex-1 flex-col gap-y-7">
                        <li>
                          <ul role="list" className="-mx-2 space-y-1">
                            {navigation.map((item) => (
                              <li key={item.name}>
                                <a
                                  href={item.href}
                                  className={classNames(
                                    item.current
                                      ? 'bg-gray-900 text-white'
                                      : 'text-gray-400 hover:text-white hover:bg-gray-900',
                                    'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold'
                                  )}
                                >
                                  <item.icon className="h-6 w-6 shrink-0" aria-hidden="true" />
                                  {item.name}
                                </a>
                              </li>
                            ))}
                          </ul>
                        </li>
                        <li className="-mx-6 mt-auto">
                          <button
                            onClick={handleLogout}
                            className="w-full flex items-center gap-x-4 px-6 py-3 text-sm font-semibold leading-6 text-white hover:bg-gray-900"
                          >
                            <img
                              className="h-8 w-8 rounded-full bg-gray-900"
                              src="https://i.pinimg.com/564x/ca/72/e0/ca72e0521cdaef62c8b7c14f6f861d8c.jpg"
                              alt=""
                            />
                            <span className="sr-only">Your profile</span>
                            <span aria-hidden="true">Administrator</span>
                          </button>
                        </li>
                      </ul>
                    </nav>
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </Dialog>
        </Transition.Root>
        <div className="xl:pl-72 bg-gray-900 min-h-screen">
          <div className="sticky top-0 z-40 flex h-16 shrink-0 items-center gap-x-6 border-b border-white/5 bg-gray-900 px-4 shadow-sm sm:px-6 lg:px-8">
            <button type="button" className="-m-2.5 p-2.5 text-white xl:hidden" onClick={() => setSidebarOpen(true)}>
              <span className="sr-only">Open sidebar</span>
              <Bars3Icon className="h-5 w-5" aria-hidden="true" />
            </button>
          </div>
          <main>
            <header>
              {/* Heading */}
              <div className="flex flex-col items-start justify-between gap-x-8 gap-y-4 bg-gray-900 px-4 py-6 sm:flex-row sm:items-center sm:px-6 lg:px-8 border-b border-gray-700">
                <div>
                  <div className="flex items-center gap-x-3">
                    <h1 className="flex gap-x-3 text-lg leading-7">
                      <span className="font-semibold text-white tracking-wide">FI</span>
                      <span className="text-gray-500">/</span>
                      <span className="font-semibold text-white tracking-wide">MASTER DATA</span>
                    </h1>
                  </div>
                  <p className="mt-2 text-sm leading-6 text-gray-400">A comprehensive list of all the master data</p>
                </div>
                <div className="order-first flex-none rounded-full bg-indigo-500/20 px-2 py-1 text-xs font-medium text-indigo-400 ring-1 ring-indigo-500/30 sm:order-none">
                  Production
                </div>
              </div>
            </header>



            {/* Activity list */}
            <div className="mx-4 sm:mx-6 lg:mx-8">
              <div className="py-3 flex justify-end mb-6">
                <button
                  className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold py-3 px-6 rounded-full shadow-lg hover:shadow-xl transition duration-300 ease-in-out"
                  onClick={openModalInput}
                >
                  Input Data
                </button>
              </div>
              <table className=" w-full text-left bg-gray-800 rounded-lg overflow-hidden shadow-md">
                <colgroup>
                  <col className="w-3/12" />
                  <col className="w-2/12" />
                  <col className="w-2/12" />
                  <col className="w-2/12" />
                  <col className="w-2/12" />
                </colgroup>
                <thead className="border-b border-gray-600 text-sm leading-6 text-gray-300 bg-gray-700">
                  <tr>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      ID FI
                    </th>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      NAME FI 
                    </th>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      ID FF
                    </th>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      NAME FF
                    </th>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      LINE 
                    </th>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      MODEL 
                    </th>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      UPDATE 
                    </th>
                    <th scope="col" className="py-4 px-4 text-center font-semibold text-lg">
                      DELETE
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-600 bg-gray-800 text-sm whitespace-nowrap">
                  {masterDataFI.map((item) => (
                    <tr key={item.IDMASTER} className="hover:bg-gray-700 transition ease-in-out duration-300">
                      <td className="py-4 px-4 text-center text-gray-400 text-lg">
                        {item.ID_FI}
                      </td>
                      <td className="py-4 px-4 text-center text-gray-400 text-lg">
                        {item.NAMA_FI}
                      </td>
                      <td className="py-4 px-4 text-center text-gray-400 text-lg">
                        {item.ID_FF}
                      </td>
                      <td className="py-4 px-4 text-center text-gray-400 text-lg">
                        {item.NAMA_FF}
                      </td>
                      <td className="py-4 px-4 text-center text-gray-400 text-lg">
                        {item.LINE}
                      </td>
                      <td className="py-4 px-4 text-center text-gray-400 text-lg">
                        {item.MODEL}
                      </td>
                      <td className="py-4 px-4 text-center">
                        <button
                          className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold py-2 px-4 rounded-full shadow-md hover:shadow-lg transition duration-300 ease-in-out"
                          onClick={() => openModal(item)}
                        >
                          Update
                        </button>
                      </td>
                      <td className="py-4 px-4 text-center">
                        <button
                          className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-semibold py-2 px-4 rounded-full shadow-md hover:shadow-lg transition duration-300 ease-in-out"
                          onClick={() => openModal2(item)} // Open modal with the specific item
                        >
                          Delete
                        </button>
                      </td>

                      {showModal && (
                        <div className="fixed inset-0 flex items-center justify-center">
                          <div className="bg-white rounded-lg shadow-lg w-96 p-6">
                            <h3 className="text-xl font-semibold text-gray-800 mb-4">Confirm Delete</h3>
                            <p className="text-gray-600 mb-6">Are you sure you want to delete this item?</p>

                            {/* Buttons */}
                            <div className="flex justify-end space-x-4">
                              <button
                                className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-full transition duration-300 ease-in-out"
                                onClick={() => setShowModal(false)} // Close modal on cancel
                              >
                                No
                              </button>
                              <button
                                className="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-full transition duration-300 ease-in-out"
                                onClick={handleConfirmDelete} // Call delete function
                              >
                                Yes
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </main>
          {isModalOpenInput && (
            <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-70">
              <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-lg">
                <h2 className="text-3xl font-bold text-gray-800 mb-6">Input Data</h2>

                {/* Success Notification */}
                {notificationInput && (
                  <div className="mb-4 p-3 bg-green-100 text-green-800 border border-green-200 rounded-lg shadow-sm">
                    {notificationInput}
                  </div>
                )}

                <form onSubmit={handleSubmit}>
                  <div className="mb-5">
                    <label className="block text-gray-700 font-medium mb-2">ID FI</label>
                    <input
                      type="text"
                      name="ID_FI"
                      value={formData.ID_FI}
                      onChange={handleChange}
                      className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                      required
                    />
                  </div>
                  <div className="mb-5">
                    <label className="block text-gray-700 font-medium mb-2">Nama FI</label>
                    <input
                      type="text"
                      name="NAMA_FI"
                      value={formData.NAMA_FI}
                      onChange={handleChange}
                      className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                      required
                    />
                  </div>
                  <div className="mb-5">
                    <label className="block text-gray-700 font-medium mb-2">ID FF</label>
                    <input
                      type="text"
                      name="ID_FF"
                      value={formData.ID_FF}
                      onChange={handleChange}
                      className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                      required
                    />
                  </div>
                  <div className="mb-5">
                    <label className="block text-gray-700 font-medium mb-2">Nama FF</label>
                    <input
                      type="text"
                      name="NAMA_FF"
                      value={formData.NAMA_FF}
                      onChange={handleChange}
                      className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                      required
                    />
                  </div>
                  <div className="mb-5">
                    <label className="block text-gray-700 font-medium mb-2">Line</label>
                    <input
                      type="text"
                      name="LINE"
                      value={formData.LINE}
                      onChange={handleChange}
                      className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                      required
                    />
                  </div>
                  <div className="mb-5">
                    <label className="block text-gray-700 font-medium mb-2">Model</label>
                    <select
                      name="MODEL"
                      value={formData.MODEL}
                      onChange={handleChange}
                      className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                      required
                    >
                      <option value="" disabled>Select a model</option>
                      <option value="NIKE REVOLUTION 7 M/W/WIDE">NIKE REVOLUTION 7 M/W/WIDE</option>
                      <option value="NIKE REVOLUTION 7 PS">NIKE REVOLUTION 7 PS</option>
                      <option value="NIKE REVOLUTION 7 TD">NIKE REVOLUTION 7 TD</option>
                      <option value="NIKE REVOLUTION 6 NN GS">NIKE REVOLUTION 6 NN GS</option>
                      <option value="NIKE AIR MAX IVO">NIKE AIR MAX IVO</option>
                      <option value="NIKE AIR MAX CORRELATE">NIKE AIR MAX CORRELATE</option>
                      <option value="NIKE AIR MAX COMMAND">NIKE AIR MAX COMMAND</option>
                      <option value="NIKE AIR MAX PLUS">NIKE AIR MAX PLUS</option>
                      <option value="NIKE KIDS CORTEZ PS">NIKE KIDS CORTEZ PS</option>
                      <option value="NIKE KIDS CORTEZ GS">NIKE KIDS CORTEZ GS</option>
                      <option value="NIKE DUNK LOW W">NIKE DUNK LOW W</option>
                      <option value="NIKE DUNK LOW GS">NIKE DUNK LOW GS</option>
                      <option value="NIKE DUNK LOW TD">NIKE DUNK LOW TD</option>
                      <option value="NIKE FLEX RUNNER 3 PS">NIKE FLEX RUNNER 3 PS</option>
                      <option value="NIKE DEFYALLDAY">NIKE DEFYALLDAY</option>
                    </select>
                  </div>
                  <div className="flex justify-end space-x-4">
                    <button
                      type="button"
                      onClick={closeModalInput}
                      className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded-lg transition"
                    >
                      Batal
                    </button>
                    <button
                      type="submit"
                      className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg shadow-md hover:shadow-lg transition duration-300 ease-in-out"
                    >
                      Submit
                    </button>
                  </div>
                </form>
              </div>
            </div>
          )}

          {isModalOpen && selectedData && (
            <div className="fixed inset-0 z-10 overflow-y-auto bg-gray-800 bg-opacity-70">
              <div className="flex items-center justify-center min-h-screen p-4">
                <div className="relative bg-white rounded-2xl shadow-lg w-full max-w-lg">
                  <div className="px-8 py-6">
                    <h2 className="text-3xl font-bold text-gray-900 mb-6">Update Data</h2>
                    <form className="space-y-6 mt-6">
                      {[
                        { label: "ID FI", value: selectedData.ID_FI, key: "ID_FI" },
                        { label: "Nama FI", value: selectedData.NAMA_FI, key: "NAMA_FI" },
                        { label: "ID FF", value: selectedData.ID_FF, key: "ID_FF" },
                        { label: "Nama FF", value: selectedData.NAMA_FF, key: "NAMA_FF" },
                        { label: "Line", value: selectedData.LINE, key: "LINE" }
                      ].map(({ label, value, key }) => (
                        <div key={key} className="relative">
                          <label className="block text-gray-700 text-sm font-medium mb-1">{label}</label>
                          <input
                            type="text"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                            value={value}
                            onChange={(e) =>
                              setSelectedData({ ...selectedData, [key]: e.target.value })
                            }
                            placeholder={label}
                          />
                        </div>
                      ))}

                      {/* Dropdown for Model */}
                      <div className="relative">
                        <label className="block text-gray-700 text-sm font-medium mb-1">Model</label>
                        <select
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                          value={selectedData.MODEL}
                          onChange={(e) =>
                            setSelectedData({ ...selectedData, MODEL: e.target.value })
                          }
                        >
                          <option value="" disabled>Select a model</option>
                          <option value="NIKE REVOLUTION 7 M/W/WIDE">NIKE REVOLUTION 7 M/W/WIDE</option>
                          <option value="NIKE REVOLUTION 7 PS">NIKE REVOLUTION 7 PS</option>
                          <option value="NIKE REVOLUTION 7 TD">NIKE REVOLUTION 7 TD</option>
                          <option value="NIKE REVOLUTION 6 NN GS">NIKE REVOLUTION 6 NN GS</option>
                          <option value="NIKE AIR MAX IVO">NIKE AIR MAX IVO</option>
                          <option value="NIKE AIR MAX CORRELATE">NIKE AIR MAX CORRELATE</option>
                          <option value="NIKE AIR MAX COMMAND">NIKE AIR MAX COMMAND</option>
                          <option value="NIKE AIR MAX PLUS">NIKE AIR MAX PLUS</option>
                          <option value="NIKE KIDS CORTEZ PS">NIKE KIDS CORTEZ PS</option>
                          <option value="NIKE KIDS CORTEZ GS">NIKE KIDS CORTEZ GS</option>
                          <option value="NIKE DUNK LOW W">NIKE DUNK LOW W</option>
                          <option value="NIKE DUNK LOW GS">NIKE DUNK LOW GS</option>
                          <option value="NIKE DUNK LOW TD">NIKE DUNK LOW TD</option>
                          <option value="NIKE FLEX RUNNER 3 PS">NIKE FLEX RUNNER 3 PS</option>
                          <option value="NIKE DEFYALLDAY">NIKE DEFYALLDAY</option>
                        </select>
                      </div>
                    </form>
                  </div>
                  <div className="px-8 py-4 bg-gray-100 flex justify-end space-x-4 rounded-b-xl">
                    <button
                      onClick={closeModal}
                      className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-6 rounded-lg transition duration-300"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleUpdate}
                      className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-medium py-2 px-6 rounded-lg transition duration-300"
                    >
                      Update
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
        {notification && (
          <div className="fixed inset-0 flex items-center justify-center z-50">
            <div className={`w-80 h-80 flex items-center justify-center rounded-lg shadow-xl p-6 ${notification.type === 'success' ? 'bg-white text-green-500' : 'bg-white text-red-500'}`}>
              <div className="flex flex-col items-center justify-center text-center">
                {notification.type === 'success' ? (
                  <CheckCircleIcon className="h-12 w-12 text-green-500" aria-hidden="true" />
                ) : (
                  <XCircleIcon className="h-12 w-12 text-red-500" aria-hidden="true" />
                )}
                <p className="mt-4 text-xl font-semibold">{notification.message}</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  )
}
